Math Basic Language


Symbols like functions, labels and variable names are all lowercase:
    x
    y
    counter
    sum
    
    
Keywords are all caps:
    Control keywords:
        IF ... DO ... ELSE IF ... DO ... ELSE ... END
        FOR ... IN ... DO ... END
        WHILE ... DO ... END
        DO ... WHILE ... END
        DO ... END (block of code)
        GOTO ...
        FIRST DO ... END
        LAST DO ... END
        USE ... DO ... END
        LOOP ... END
        
    Other:
        RETURN var
        BREAK
        REDO
        SKIP
        GLOBAL
        STATIC
        CALL var (call code with local parameters)
        SIGNAL var-list
        LISTEN
        EXIT var
        
    Modifiers:
        $ (don't execute, e.g. a reference variable)
       
    Ranges:
        k_1 : k_i - k_i-1 : k_n
        k_1 : k_n (step is 1)
    Intervals:
        (k_min ... k_max)
        [k_min ... k_max]
        [k_min ... k_max)
        (k_min ... k_max]
        
    Macro and templates:
        %
        one letter type names are templates
        
        
    Lists:
        (var_1, var_2, ..., var_n)
        (type_1, type_2, ..., type_n)
    Books:
	((key_1, var_1), ...
        
    Variable and type declarations:
        TYPE alias = type
        UNIT name
        UNIT alias = unit-expression
        type name 
        RECORD name BEGIN var-definition-list END
        TYPES type-list
        
    Functions:
        FUNCTION name
        INPUT var-list
        OUTPUT var-list
        REQUIRE
        ASSURE INPUT ... OUTPUT ...
        BEGIN ... END
        
        
        
    IO keywords:
        IN
        OUT
        ERROUT
        ARGS
        
    Logical keywords:
        AND
        OR
        XOR
        NOT
        NAND
        NOR
        BITAND
        BITOR
        BITXOR
        BITNAND
        BITNOR
        BITNOT
	
    Container keywords:
    	COPY container
        container FIRST
        container LAST
        container 
        container >> var (POP LAST, NEXT)
        var << container (pops first)
        var >> container (prepends)
        container << var (appends)

        container >>> var (creates an internal marker and POPs from it)

        container INSERT VALUE var KEY var
        container INSERT VALUE var INDEX var
        container DELETE VALUE var
        container DELETE KEY var
        container DELETE INDEX var
        container DELETE FIRST
        container DELETE LAST
        container DELETE
        container FIND (LAST | FIRST) var
        container SORT (ASC | DESC | LENGTH | $expr)
        container UNIQUE
        var IS_IN container
        
        
        marker USE container (returns marker)
        (marker) NEXT (ELSE ...) 
        (marker) PRIOR (ELSE ...)
        (marker) RESET
        (marker) POP (ELSE ...)
        (marker) PUSH
        (marker) END
    
    Streaming:
        IN >> i >> ":" >> str >> ENDLINE
        OUT << str << " " << i << ENDLINE
        # Match line
        IN >> Line l
        # Match word
        IN >> Word w1 >> Word w2 
        
        
        WHILE IN DO
            IN >>> "cat" >> WS >> Str $s >> WS >> Num $age
                >> DO OUT << "It is a cat. The race is {s}. It is {age} years old." << ENDLINE END
                >> SKIP
            IN >>> "dog" >> WS >> Str s >> WS >> Num weight
                >> DO OUT << "A dog. Its name is {s} and its weight is {weight}\n" END
                >> SKIP
            IN >>> Str $s IS_IN ("duck", "goose", "chicken")
                >> Num $n >> WS
                >> Bool $can_fly
                >> DO OUT << "The {s} {can_fly ? "can fly" : "can't fly"}" << ENDLINE END 
                >> SKIP
            SIGNAL "File has inproper syntax"
        END
        
    Math:
    
        IN >> Num a >> Num b
        OUT << "Sum:" << a + b
        
            
        
Types starts with capital letter and continue with lowercase or numbers:
    Integer
    Number
    String
    In
    Out
    Errout
    
Fancy types can hold other types:
    List Integer
    Integers (list of Integers)
    Book Number (Hashtable)
    Tree Text
    Matrix Number
    Matrix Integer
    Vector Integer


Operators:
    Fancy:
        |expr| (absolute value)
        ||expr|| (normalized value)
        
	Binary:
	var + var
        var * var
        var ANGLE var
	var CROSSPRODUCT var (cross product)
        var DOTPRODUCT var (dot product)
	var / var
        var \ var
	var - var
	var // var (integer division)
        var % var (remainder)
	=
	^
	Unary:
	-
	+
	. operator (memberwise operator)

Special variables:
    e_x (unit vectors>
    e_y
    e_z
    pi 
    e
    
String manipulation:
    STRING var (convert the variable to a string representation of it)
    "{var} is a {fnc(var)}" (The value of the expression in curly brackets are inserted into the string)
    "{%f.3}" (printf)
    "abc" + "def" (concat)
    
    
    
    
    
    
